Desenvolva um sistema de gerenciamento de prioridades para um sistema operacional que precisa equilibrar a execução de processos baseando-se em duas métricas críticas: a prioridade de execução e o tempo de espera. Para isso, você utilizará duas estruturas de dados Heap: um Heap Máximo para gerenciar os processos com base na prioridade de execução, e um Heap Mínimo para gerenciar os processos com base no tempo de espera. Este sistema ajudará o escalonador do sistema operacional a decidir qual processo executar a seguir, considerando tanto a urgência quanto a justiça no tempo de espera.
 
Alguns pontos a serem considerados:
 
1. Estrutura de Processo: Primeiramente, defina uma estrutura `Processo` em C que contenha, no mínimo, os seguintes campos:
   - int pid: Um identificador único para o processo.
   - int prioridade: Um valor inteiro que representa a prioridade de execução do processo. Valores mais altos indicam maior prioridade.
   - int tempoEspera: Um valor inteiro que representa o tempo que o processo está esperando para ser executado. Valores mais altos indicam um maior tempo de espera.
 
2. Implementação dos Heaps Máximo e Mínimo:
   - Implemente um Heap Máximo para organizar os processos por prioridade de execução.
   - Implemente um Heap Mínimo para organizar os processos por tempo de espera.
   - Ambos os heaps devem suportar operações de inserção (inserirProcesso), remoção do processo no topo (removerProcessoTopo), e verificação se o heap está vazio (heapVazio).
 
3. Funções Requeridas:
   - Para cada Heap (Máximo e Mínimo), implemente as seguintes funções:
     - void inserirProcesso(Processo* heap, int* tamanhoAtual, Processo novoProcesso): Insere um novo processo no heap apropriado, mantendo as propriedades do heap.
     - Processo removerProcessoTopo(Processo* heap, int* tamanhoAtual): Remove e retorna o processo no topo do heap.
     - int heapVazio(int tamanhoAtual): Retorna 1 se o heap estiver vazio, caso contrário retorna 0.
   - Implemente uma função void imprimirProcessos(Processo* heap, int tamanho) que imprime a lista de processos em cada heap, de acordo com sua prioridade ou tempo de espera.
-  Implemente uma função que permita entrar com uma quantidade n de processos tanto para o Heap Máximo, quanto para o Heap Mínimo.

neste caso, para criar a heap serao necessarios as seguintes structs

struct Processo {
    int pid;
    int prioridade;
    int tempoEspera;
};

struct Heap {
    Processo* processos;
    int tamanho;
    int capacidade;
};


    int n;
    Processo *heapMaximo;
    Processo *heapMinimo;
    int tamanhoMaximo;
    int tamanhoAtualMaximo;
    int tamanhoAtualMinimo;
    Processo novoProcesso;
    int i;
    printf("Digite o tamanho maximo do heap: ");
    scanf("%d", &tamanhoMaximo);
    heapMaximo = criarHeap(tamanhoMaximo);
    heapMinimo = criarHeap(tamanhoMaximo);
    tamanhoAtualMaximo = 0;
    tamanhoAtualMinimo = 0;
    printf("Digite a quantidade de processos: ");
    scanf("%d", &n);
    for(i = 0; i < n; i++){
        printf("Digite o pid do processo: ");
        scanf("%d", &novoProcesso.pid);
        printf("Digite a prioridade do processo: ");
        scanf("%d", &novoProcesso.prioridade);
        printf("Digite o tempo de espera do processo: ");
        scanf("%d", &novoProcesso.tempoEspera);
        inserirProcesso(heapMaximo, &tamanhoAtualMaximo, novoProcesso);
        inserirProcessoPorTempoEspera(heapMinimo, &tamanhoAtualMinimo, novoProcesso);
    }
    printf("Heap Maximo: \n");
    imprimirProcessos(heapMaximo, tamanhoAtualMaximo);
    printf("Heap Minimo: \n");
    imprimirProcessos(heapMinimo, tamanhoAtualMinimo);
    return 0;








    void entradaProcesso(Processo *heapMax, int* tamanhoAtualMax, Processo *heapMin, int* tamanhoAtualMin, int n) { //entrada tanto para  heap minimo quanto maximo
    int i;
    Processo novoProcesso;
    for (i = 0; i < n; i++) {
        printf("Entre com o pid do processo: ");
        scanf("%d", &novoProcesso.pid);
        printf("Entre com a prioridade do processo: ");
        scanf("%d", &novoProcesso.prioridade);
        printf("Entre com o tempo de espera do processo: ");
        scanf("%d", &novoProcesso.tempoEspera);
        inserirProcesso(heapMax, tamanhoAtualMax, novoProcesso);
        inserirProcessoPorTempoEspera(heapMin, tamanhoAtualMin, novoProcesso);
    }
}